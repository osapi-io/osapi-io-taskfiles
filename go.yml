---
version: "3"

vars:
  GIT_ROOT:
    sh: git rev-parse --show-toplevel
  MAIN_PACKAGE: main.go
  OS_TAGS:
    sh: |
      if grep -iq "ubuntu" /etc/os-release; then
        echo "-tags=ubuntu"
      else
        echo ""
      fi

tasks:
  deps:
    desc: Install dependencies
    cmds:
      - go install tool

  mod:
    desc: Module maintenance
    cmds:
      - go mod download
      - go mod tidy
      - |
          if [ -d examples/ ] && [ "$(ls examples/)" ]; then
            for dir in examples/*/; do
              (cd "${dir}" && go mod tidy)
            done
          fi

  vet:
    desc: Report likely mistakes in packages
    cmds:
      - go tool github.com/golangci/golangci-lint/cmd/golangci-lint run --config {{ .GIT_ROOT }}/.golangci.yml

  run:
    desc: Compile and run Go program
    cmds:
      - go run {{ .MAIN_PACKAGE }} {{ .CLI_ARGS }}

  unit:
    desc: Test packages
    cmds:
      - go test {{ .OS_TAGS }} -parallel 5 -race -v ./...

  unit:int:
    desc: Integration test packages
    cmds:
      - task: bats:test

  test:
    desc: Test all
    cmds:
      - task: mod
      - task: fmt:check
      - task: docs:check
      - task: vet
      - task: unit:cov

  unit:cov:
    desc: Generate coverage
    env:
      # https://github.com/golang/go/issues/65570
      GOEXPERIMENT: nocoverageredesign
    cmds:
      - go test {{ .OS_TAGS }} -race -coverprofile=cover.out -v $(go list ./...)
      - grep -v -f .coverignore cover.out > cover.tmp && mv cover.tmp cover.out
      - go tool github.com/boumenot/gocover-cobertura < cover.out > cobertura.xml
      - go tool cover -func=cover.out

  unit:cov:map:
    desc: Generate coverage and show heatmap
    cmds:
      - task: unit:cov
      - go tool cover -html=cover.out

  fmt:
    desc: Reformat files whose formatting differs from `go_fmt_command`
    cmds:
      - find . -type f -name '*.go' ! -name '*.gen.go' ! -name '*.pb.go' | xargs go tool mvdan.cc/gofumpt -l -w
      - find . -type f -name '*.go' ! -name '*.gen.go' ! -name '*.pb.go' | xargs go tool github.com/segmentio/golines --base-formatter=gofumpt -w

  fmt:check:
    desc: Check files whose formatting differs from `go_fmt_command`
    cmds:
      # https://github.com/mvdan/gofumpt/issues/114
      - test -z "$(find . -type f -name '*.go' ! -name '*.gen.go' ! -name '*.pb.go' | xargs go tool mvdan.cc/gofumpt -d -e | tee /dev/stderr)"
      - test -z "$(find . -type f -name '*.go' ! -name '*.gen.go' ! -name '*.pb.go' | xargs go tool github.com/segmentio/golines --dry-run --base-formatter=gofumpt -l | tee /dev/stderr)"

  generate:
    desc: Generate Go files by processing source
    cmds:
      - go generate ./...

  docs:generate:
    desc: Generate markdown documentation for golang code
    cmds:
      - gomarkdoc --output README.md ./...

  docs:generate:
    desc: Generate documentation for each package in pkg/
    cmds:
      - mkdir -p docs/gen/
      - |
        for pkg in $(find pkg -type d -not -path "pkg" -not -path "pkg/*/*" -mindepth 1 -maxdepth 1); do
          pkg_name=$(basename "${pkg}")
          gomarkdoc --output "docs/gen/${pkg_name}.md" "./${pkg}"
        done

  docs:check:
    desc: Check if docs are outdated by verifying git status
    cmds:
      - |
        if [[ -n "$(git status --porcelain docs/)" ]]; then
          echo "Documentation is outdated! Run 'task docs:generate' to regenerate and commit changes."
          exit 1
        fi
